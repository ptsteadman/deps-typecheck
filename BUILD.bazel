load("@npm//@bazel/typescript:index.bzl", "ts_library", "ts_project")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library", "nodejs_binary")

# js_library is used instead of ts_library or ts_project because
# the typescript compiler doesn't need to be run directly on a type declaration file.
# In fact, ts_project will fail to run on just a d.ts file as input.
# js_library will wrap the typings file with providers so it can be consumed by other targets:
# see: https://bazelbuild.github.io/rules_nodejs/Built-ins.html#outputs

# js_library(
#     name = "jaeger-client",
#     srcs = [
#         "index.d.ts",
#     ],
#     visibility = [
#         "//src/typescript/clientapi:__subpackages__",
#     ],
#     deps = [
#         "@npm//@types/express-serve-static-core",
#         "@npm//@types/jaeger-client",
#     ],
# )

package(default_visibility = ["//visibility:public"])

js_library(
    name = "request_with_span",
    srcs = ["requestWithSpan.d.ts"],
    deps = [
        "@npm//opentracing",
    ],
)

# BUILDS SUCCESSFULLY
ts_project(
    name = "test_server",
    srcs = ["testServer.ts"],
    declaration = True,
    tsconfig = "//:tsconfig.json",
    deps = [
        ":request_with_span",
        "@npm//@types/express",
    ],
)

nodejs_binary(
    name = "bin",
    data = [
        ":test_server",
    ],
    entry_point = ":testServer.ts",
)
